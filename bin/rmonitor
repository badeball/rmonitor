#!/usr/bin/env ruby

require "commander/import"
require "rmonitor"
require "rmonitor/version"

program :name, "rmonitor"
program :version, RMonitor::VERSION
program :description, "A tool for creating monitor profiles that are easily invoked."

global_option "-c", "--config-path PATH", <<DESC.strip do |path|
  Specify the path to the configuration file (defaults to ~/.config/rmonitor/config.rb)
DESC
  RMonitor::Config.config_path = path
end

def create_common_options(c)
  c.option "--strategy NAME", String, <<-DESC.strip.gsub(/^ +/, "")
    invoke using an execution strategy

    the possible options are

    · optimistic - attempt to invoke a profile using a single xrandr command

    · pessimistic - invoke a profile using multiple xrandr commands (slower, safer and default)
  DESC

  c.option "--dry-run", "don't run any destructive commands"
  c.option "--verbose", "print every command ran"
end

def create_option_hash(options)
  hash = {
    :dry_run => options.dry_run,
    :verbose => options.verbose
  }

  hash[:strategy] = case options.strategy
                      when "optimistic"
                        RMonitor::Strategies::Optimistic.new(hash)
                      when "pessimistic", nil
                        RMonitor::Strategies::Pessimistic.new(hash)
                      else
                        raise ArgumentError, "unknown execution strategy"
                    end

  hash
end

command :invoke do |c|
  c.syntax = "invoke [options]"
  c.description = "invoke a profile by name"
  c.option "-n", "--name NAME", String
  create_common_options(c)
  c.action do |_, options|
    RMonitor::Commands::CL::Invoke.new(create_option_hash(options)).execute(options.name)
  end
end

command :list do |c|
  c.syntax = "list"
  c.description = "lists all available profiles"
  c.action do
    RMonitor::Commands::CL::List.new.execute
  end
end

command :update do |c|
  c.syntax = "update"
  c.description = "invokes the most preferred profile"
  create_common_options(c)
  c.action do |_, options|
    RMonitor::Commands::CL::Update.new(create_option_hash(options)).execute
  end
end
