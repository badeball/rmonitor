#!/usr/bin/env ruby

require 'optparse'
require 'rmonitor'
require 'rmonitor/version'

class << self
  attr_accessor :options
end

self.options = { :action => :create }

OptionParser.new do |opts|
  opts.banner = "Usage: rmonitor [option]"

  opts.on("-i", "--invoke NAME", String, "invoke a profile with a given name") do |name|
    options[:action] = :invoke
    options[:name] = name
  end

  opts.on("-u", "--update", "invoke the most preferable profile") do
    options[:action] = :update
  end

  opts.on("-v", "--verbose", "verbose output") do
    options[:verbose] = true
  end

  opts.on("-d", "--dry-run", "perform a dry run (implies -v)") do
    options[:dry_run] = true
    options[:verbose] = true
  end

  opts.on("--config-path PATH", String, "path to the configuration file (defaults to ~/.config/rmonitor/config.rb") do |config_path|
    RMonitor.config_path = config_path
  end

  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "print the version number of rmonitor") do
    puts "rmonitor #{RMonitor::VERSION}"
    exit
  end
end.parse!

def v_puts(content)
  if options[:verbose]
    puts content
  end
end

def exit_with(content)
  $stderr.puts content
  exit! 1
end

rm = RMonitor.load

if options[:action] == :update
  # Find the first invokable profile
  profile = rm.profiles.find do |profile|
    RMonitor::Profiles.invokable?(rm.devices, profile)
  end

  if profile
    v_puts "Found #{profile[:name].inspect} that is invokable."
    options[:name] = profile[:name]
    options[:action] = :invoke
  else
    exit_with 'no invokable profile exists'
  end
end

if options[:action] == :invoke
  profile = rm.profiles.find { |p| p[:name] == options[:name] }

  if profile
    if RMonitor::Profiles.invokable?(rm.devices, profile)
      command = RMonitor::Profiles.to_xrandr(rm.devices, profile)
      v_puts "Invoking #{profile[:name].inspect} by running #{command.inspect}."
      exec(command) unless options[:dry_run]
    else
      exit_with 'this profile is not invokable'
    end
  else
    exit_with 'no profile with that name exists'
  end
end
